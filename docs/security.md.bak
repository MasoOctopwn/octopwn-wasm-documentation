# Security
OctoPwn is designed to be a tool for internal penetration testing, and we (authors) understand that the security of the tools and tester environment is crucial when performing such tests. In this section we outline the threat model of OctoPwn to describe how OctoPwn protects your and your customer's data.


# Framework

## Hosting 
There are two hosting methods considered in our threat model, first the default configuration whereas OctoPwn is loaded from the official URLs http://wasm.octopwn.com or https://wasm.octopwn.com, second if OctoPwn is hosted on a webserver at the cusomer's computer here referred to as private-hosting.

### Official hosting
OctoPwn code (HTML/JS/WASM code) is hosted in a Google cloud bucket the HTTPS and HTTP services are provided by two Google cloud load balancers, serving the static files of the framework from the same bucket.  

#### HTTPS service
This is the recommended way to load OctoPwn from.
The HTTPS certificate is managed by Google, the load balancer was set up according to best practises.
In this scenario 

#### HTTP service
Loading octopwn from the official domain via plaintext HTTP is NOT recommended, the reason this service exists at all is that it allows using OctoPwn with maximum user conveinence, as users will not need to have the WSNET proxy set up with cerificates.  
There are no security guarantees when using OctoPwn via plaintext HTTP, as attackers with MiTM capabilities will be able to inject malicious code to the framework.  

### Unofficial hosting - localhost
Users have the option to download the OctoPwn framework and host it on their own. In this case we cannot provide any security guarantees, our only recommendation is to download the framework code from the official website via HTTPS.

### Patches/hotfixes
Code will always have bugs, OctoPwn is no exception. However, using OctoPwn with the official hosting over HTTPS will always ship with the latest, up to date code.

## Plugin system (licensing)
The plugin system is not part of the framework, therefore it deserves a separate section. The plugins themselves are also executable code, and despite they will only run in the brwoser they need to be just as protected as the framework itself.  
There are two versions of the plugin system, online and offline.

### Online version
This is the recommended way if you have internet access and can reach `https://licensing.octopwn.com`

#### Hosting
The plugins and licensing logic are hosted on Google Cloud Run. This page is only accessible via HTTPS, where the certificate and the load balancer and the execution envrionment is managed by Google.

#### Login
The logic for login is provided by the framework, the security guarantees are the same. Login can only be performed via HTTPS, and there is an additional encryption layer for the credentials and the plugins delivered for extra protection. 

#### Delivery
Delivery is using HTTPS

### Offline version
When a user has no internet access and hosts OctoPwn's code locally, the online plugin system is not accessible. For these scenarios the users can download their certificate/private key package as well as the plugins on another system which can be used to allow OctoPwn to work as a fully functioning online system. The user secrets and the plugins are delivered encrypted over HTTPS channel.


## Browser
As OctoPwn is running in the browser, the same security guarantees applicable as your browser of choice gives you. OctoPwn does not circumvent any browser safety feature, but there are certain behaviour that affects security, especially on storing sensitive information.

### Storage of sensitive information
OctoPwn defines two virtual file systems in the WASM environment, one memory backed filesystem and the other is using berowser local storage.  

#### Memory backed file system
This is a volatile file system which is only accessible by the framework itself, they are not stored on disc (unless swapping occurs). After reloading the OctoPwn framework (eg. rereshing the page) or closing the browser all these files will be destoryed.

#### Local storage backed filesystem
Files stored on this filesystem are non-volatile and will be present after re-loading the envronment or closing the browser. These files can be cleared wither by deleting the cache of the browser, or by manually removing the files in OctoPwn framework's `/static` virtual filesystem.  
The project's session file is stored on this location, which contains sensitive information and is not encrypted.  
Furthermore, the files stored here might be accessible by whoever has access to the disk, as the files storing the localstorage cache of the browser are not always encrypted.


### XSS
Foreword: OctoPwn is running inside your browser, therefore we treat all user input as trusted. This doesn't mean that there are no security measure against self-XSS but ultimately there are no way of protecting against that as the users can easily modify the code of the local website or framework.  
XSS is the largest security concern of the framework itself as OctoPwn processes a lot of untrusted data during a security assessment. The data processing itself is performed by Python scripts which give strong security guarantees but the results are represented in the browser itself. 

## Industry standards / literature
In this section we outline our assessments on OctoPwn wasm framework in relation with common vulnerability literatures.  
Please note that this assessment only concerns OctoPwn framework and not the backend systems. The backend system's security will be discussed in a different section.

### OWASP Top 10
Source: `https://owasp.org/www-project-top-ten/`
A01:2021-Broken Access Control: Not applicable
A02:2021-Cryptographic Failures: Mild concern on the plugin delivery logic, but it is using HTTPS managed by Google.
A03:2021-Injection: Serious concern as OctoPwn processes a lot of untrusted data during assessments.
A04:2021-Insecure Design: ???
A05:2021-Security Misconfiguration: ???
A06:2021-Vulnerable and Outdated Components: Mild concern in regards of 3rd party JS libraries
A07:2021-Identification and Authentication Failures: Not applicable
A08:2021-Software and Data Integrity Failures: Not applicable
A09:2021-Security Logging and Monitoring Failures: Not applicable
A10:2021-Server-Side Request Forgery: Not applicable

### SYNK - How secure is WebAssembly? 5 security concerns unique to WebAssembly
Source: `https://snyk.io/blog/webassembly-security-concerns/`

Security concern #1: WebAssembly module isolation: This is a mild security concern, but ultimately it's Pyodide's part
Security concern #2: WebAssembly linear memory model: This is a mild security concern, but ultimately it's Pyodide's part
Security Concern #3: WebAssembly JIT compilation: Exploiting this vulnerability would require attackers to have vulnerability in the browser's code itself. While it's not unheard of it's higly unlikely that attackers vould specifically target OctoPwn at that point.
Security Concern #4: Web APIs and cross-site scripting (XSS): Web APIs are not concerning, but XSS is a major concern.
Security concern #5: Insecure WebAssembly content delivery: As per our recommendation only use OctoPwn loaded via HTTPS or host the code locally which was downloaded form the official site over HTTPS




# Webosckets to TCP proxy
When the selected Mode of Operation is Standalone, the framework requires a websockets to TCP proxy to be running under localhost. This channel must be well protected, as browsers do not enforce SOP (same origin policy) fro websocket connections, technically any malicious page would be able to connect to this service.  

## Protections
WSNEt server offers the followign security features:
1. Origin header check. 
2. Randomized websockets path

### Origin header check
The WSNET server will check the `Origin` header of all incoming websockets connection and matches it to either `localhost` or `127.0.0.1` or to any `.octopwn.com` domains. If the incoming connection's header does not match, the connection will be termiated. Modern Browsers do not allow scripts to modify this header.

### Randomized path
Upon every new start of the WSNET service a randomized UUID will be generated which is used as a path. This path must be copy-pasted in the appropriate field when setting up the OctoPwn framework. Every new websockets connection is checked for this path, and if it's incorrect the connection will be terminated. An attacker would need to guess a random 128bit number.

## Framework loaded via HTTP
If the octoPwn framework was loaded via HTTP, the WSNET proxy must also be started as a plaintext websockets service. In this setup there are no security guarantees, unless the framework and the proxy are both running on localhost.

## Framework loaded via HTTPS
When the framework is loaded via HTTPS then the WSNET proxy must also be started with appropriate ceritficates. These certificates must be trusted by the browser as well. As the proxy should only be running on localhost, there is no additional benefit using certificates but it is a must as browsers will not connect to plaintext websockets servers when the initiator page is loaded via HTTPS.




